# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AdminUserUpdateInput {
  name: String
  avatarUrl: String

  """Defines the login of the user to update"""
  login: String!
  role: UserRole
}

"""Filter input parameters for `Boolean` type."""
input BooleanFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: Boolean
  neq: Boolean
}

input CredentialsInput {
  login: String!
  password: String!
}

"""Filter input parameters for `Date` type."""
input DateFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: DateTime
  neq: DateTime
  geq: DateTime
  leq: DateTime
  gt: DateTime
  lt: DateTime
  in: [DateTime!]
  nin: [DateTime!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Defines a mode to unite all filter conditions for fields or inside one field.
"""
enum FilterUnion {
  And
  Or
  Nand
  Nor
}

input FloatFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: Float
  neq: Float
  geq: Float
  leq: Float
  gt: Float
  lt: Float
  in: [Float!]
  nin: [Float!]
}

input IntFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: Int
  neq: Int
  geq: Int
  leq: Int
  gt: Int
  lt: Int
  in: [Int!]
  nin: [Int!]
}

input MetaUserFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  props: UserFilterInput!
}

type Mutation {
  signIn(credentials: CredentialsInput!): UserAndToken
  signUp(data: SignUpInput!): UserAndToken!
  updateMe(params: UserUpdateInput!): User!
  updateUser(params: AdminUserUpdateInput!): User!
}

type Query {
  getUserByLogin(login: String!): User
  getUsersPage(params: UserPaginationInput!): UserPage!
  getMe: User!
}

input SignUpInput {
  credentials: CredentialsInput!
  name: String!
}

"""Defines ascending or descending order for sorting items."""
enum SortingOrder {
  Asc
  Desc
}

"""Defines sorting order for the given field."""
input SortInput {
  """
  Defines whether to return `null` values first or not (`false` by default)
  """
  nullsFirst: Boolean

  """Defines the order for the given field to be sorted with."""
  ordering: SortingOrder!
}

"""Filter input parameters for `String` type"""
input StringFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: String
  neq: String
  like: String
  nlike: String
  in: [String!]
  nin: [String!]
}

type User {
  creationDate: DateTime!
  lastUpdateDate: DateTime!
  role: UserRole!
  name: String!
  login: String!
  avatarUrl: String
  avatarUrlOrDefault: String!
}

type UserAndToken {
  user: User!
  jwt: String!
}

input UserFilterInput {
  avatarUrl: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
  login: StringFilterInput
  name: StringFilterInput
  role: UserRoleFilterInput
}

type UserPage {
  """Contains an array of items payload for this page."""
  data: [User!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input UserPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines filters that the items of the returned page must match."""
  filter: MetaUserFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: UserSortInput
}

"""Enumeration that defines users' access level"""
enum UserRole {
  Guest
  Regular
  Admin
}

input UserRoleFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: UserRole
  neq: UserRole
  in: [UserRole!]
  nin: [UserRole!]
}

input UserSortInput {
  avatarUrl: SortInput
  login: SortInput
  name: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
  role: SortInput
}

input UserUpdateInput {
  name: String
  avatarUrl: String
}
