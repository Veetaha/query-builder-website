# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AdminUserUpdateInput {
  name: String
  avatarUrl: String

  """Defines the login of the user to update"""
  login: String!
  role: UserRole
}

"""Filter input parameters for `Boolean` type."""
input BooleanFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: Boolean
  neq: Boolean
}

input CredentialsInput {
  login: String!
  password: String!
}

"""Filter input parameters for `Date` type."""
input DateFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: DateTime
  neq: DateTime
  geq: DateTime
  leq: DateTime
  gt: DateTime
  lt: DateTime
  in: [DateTime!]
  nin: [DateTime!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Defines a mode to unite all filter conditions for fields or inside one field.
"""
enum FilterUnion {
  And
  Or
  Nand
  Nor
}

input IntFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: Int
  neq: Int
  geq: Int
  leq: Int
  gt: Int
  lt: Int
  in: [Int!]
  nin: [Int!]
}

type Like {
  """Login of the user that set the like."""
  raterLogin: String!

  """Id of the proposal that the user rated."""
  proposalId: Int!

  """Defines whether the user liked the proposal or not."""
  liked: Boolean!
  rater: User!
  proposal: Proposal!
}

input LikeFilterInput {
  proposalId: IntFilterInput
  raterLogin: StringFilterInput
  liked: BooleanFilterInput
}

type LikePage {
  """Contains an array of items payload for this page."""
  data: [Like!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input LikePaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines filters that the items of the returned page must match."""
  filter: MetaLikeFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: LikeSortInput
}

input LikeSortInput {
  proposalId: SortInput
  raterLogin: SortInput
  liked: SortInput
}

input MetaLikeFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  props: LikeFilterInput!
}

input MetaProposalFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  props: ProposalFilterInput!
}

input MetaUserFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  props: UserFilterInput!
}

type Mutation {
  signIn(credentials: CredentialsInput!): UserAndToken
  signUp(data: SignUpInput!): UserAndToken!

  """Requires auth. Updates current client data and returns it."""
  updateMe(params: UserUpdateInput!): User!

  """
  Requires 'Admin' rights. Updates user by the given login and returns it, but
  retuns `null` if there nothing was found for the given login.
  """
  updateUser(params: AdminUserUpdateInput!): User

  """
  Requires auth. Creates a proposal on behalf of the client and returns it.
  """
  createProposal(params: ProposalCreateInput!): Proposal!

  """
  Requires auth. Updates proposal and returns it, but throws if propsal doesn't
  exist or client has no rights to mutate the proposal.
  """
  updateProposal(params: ProposalUpdateInput!): Proposal!

  """
  Requires auth. Deletes the proposal by id and returns `true`, but throws  if
  propsal doesn't exist or client has no rights to mutate the proposal.
  """
  deleteProposal(id: Float!): Boolean!
  setLike(proposalId: Int!, liked: Boolean!): Like!
}

type Proposal {
  id: Int!
  creationDate: DateTime!
  lastUpdateDate: DateTime!
  creatorLogin: String!
  name: String!
  introText: String!
  bodyText: String!
  mainPictureUrl: String

  """
  Returns existing `mainPictureUrl` or default one if former was not set.
  """
  mainPictureUrlOrDefault: String!

  """Returns the user that created this proposal."""
  creator: User!
}

input ProposalCreateInput {
  name: String!
  introText: String!
  bodyText: String!
  mainPictureUrl: String
}

input ProposalFilterInput {
  id: IntFilterInput
  name: StringFilterInput
  introText: StringFilterInput
  creatorLogin: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
}

type ProposalPage {
  """Contains an array of items payload for this page."""
  data: [Proposal!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input ProposalPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines filters that the items of the returned page must match."""
  filter: MetaProposalFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: ProposalSortInput
}

input ProposalSortInput {
  id: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
  name: SortInput
  creatorLogin: SortInput
  introText: SortInput
}

input ProposalUpdateInput {
  id: Int!
  name: String
  introText: String
  bodyText: String
  mainPictureUrl: String
}

type Query {
  """Returns user by login, or `null` if nothing was found."""
  getUserByLogin(login: String!): User

  """Paginates all users."""
  getUsersPage(params: UserPaginationInput!): UserPage!

  """Requires auth. Returns `User` that represents the current client."""
  getMe: User!

  """Paginates all proposals."""
  getProposalsPage(params: ProposalPaginationInput!): ProposalPage!

  """Returns proposal by id, or `null` if nothing was found."""
  getProposalById(id: Int!): Proposal
  getRatingOfProposal(id: Int!): Rating
  getLikesPage(params: LikePaginationInput!): LikePage!
}

type Rating {
  """Total amount of likes."""
  likes: Int!

  """Total amount of dislikes."""
  dislikes: Int!
}

input SignUpInput {
  credentials: CredentialsInput!
  name: String!
}

"""Defines ascending or descending order for sorting items."""
enum SortingOrder {
  Asc
  Desc
}

"""Defines sorting order for the given field."""
input SortInput {
  """
  Defines whether to return `null` values first or not (`false` by default)
  """
  nullsFirst: Boolean

  """Defines the order for the given field to be sorted with."""
  ordering: SortingOrder!
}

"""Filter input parameters for `String` type"""
input StringFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: String
  neq: String
  ilike: String
  nilike: String
  like: String
  nlike: String
  in: [String!]
  nin: [String!]
}

type User {
  creationDate: DateTime!
  lastUpdateDate: DateTime!
  role: UserRole!
  name: String!
  login: String!
  avatarUrl: String

  """Returns existing `avatarUrl` or default one if former was not set."""
  avatarUrlOrDefault: String!
}

type UserAndToken {
  user: User!
  jwt: String!
}

input UserFilterInput {
  avatarUrl: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
  login: StringFilterInput
  name: StringFilterInput
  role: UserRoleFilterInput
}

type UserPage {
  """Contains an array of items payload for this page."""
  data: [User!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input UserPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines filters that the items of the returned page must match."""
  filter: MetaUserFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: UserSortInput
}

"""Enumeration that defines users' access level"""
enum UserRole {
  Guest
  Regular
  Admin
}

input UserRoleFilterInput {
  """Defines the mode (logical operator) to unite all filter conditions."""
  unionMode: FilterUnion
  eq: UserRole
  neq: UserRole
  in: [UserRole!]
  nin: [UserRole!]
}

input UserSortInput {
  avatarUrl: SortInput
  login: SortInput
  name: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
  role: SortInput
}

input UserUpdateInput {
  name: String
  avatarUrl: String
}
